<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
    <Type Name="lua_State">
        <DisplayString>[thread top=]{top-(ci-&gt;func+1)}</DisplayString>
        <Expand>
            <!--Item Name="[stack top]">top-(ci->func+1)</Item><IndexListItems><Size>top-(ci->func+1)+1</Size><ValueNode>ci->func[$i]</ValueNode></IndexListItems-->
            <Item Name="[stack top]">top-(ci-&gt;func+1)</Item>
            <CustomListItems ExcludeView="Test" MaxItemsPerView="100">
                <Variable InitialValue="(top-(ci-&gt;func+1))+1" Name="i"/>
                <Variable InitialValue="(top-(ci-&gt;func+1))+1" Name="siz_1"/>
                <Loop>
                    <If Condition="i &gt; 1">
                        <Exec>i--</Exec>
                        <Item Name="[{i}]   [{i-siz_1}]">ci-&gt;func[i]</Item>
                    </If>
                    <Break Condition="i == 1"/>
                </Loop>
            </CustomListItems>
            <Item Name="[registry]">l_G-&gt;l_registry</Item>
            <!-- <Item Name="[globals]">l_gt</Item>-->
            <Item Condition="ci-&gt;func-&gt;val.tt_!=0" Name="[call]">ci-&gt;func</Item>
            <Item Name="[callinfo list]">&quot;------------------------------------&quot;</Item>
            <LinkedListItems>
                <!-- <Size>m_nElements</Size>-->
                <HeadPointer>ci</HeadPointer>
                <NextPointer>previous</NextPointer>
                <ValueNode>this</ValueNode>
            </LinkedListItems>
        </Expand>
    </Type>
    <Type Name="Node">
        <DisplayString>{u} = {i_val}</DisplayString>
        <Expand>
            <Item Name="[key]">u</Item>
            <Item Name="[val]">i_val</Item>
        </Expand>
    </Type>
    <Type Name="NodeKey">
        <DisplayString Condition="(key_tt)==0">[nil]</DisplayString>
        <DisplayString Condition="(key_tt)==3">[number]</DisplayString>
        <DisplayString Condition="(key_tt)==1">[boolean] {(bool)(key_tt==17)}</DisplayString>
        <DisplayString Condition="(key_tt)==2">[lightuserdata] {(void *)(key_val).p}</DisplayString>
        <!--#define ttisinteger(o)    checktag((o), LUA_TNUMINT)-->
        <DisplayString Condition="(key_tt)==35">[int] {(lua_Integer)(key_val).i}</DisplayString>
        <DisplayString Condition="(key_tt)==19">[number] {(lua_Number)((key_val).n)}</DisplayString>
        <DisplayString Condition="(key_tt&amp;0x0f)==4">[string] {((struct TString *)(key_val.gc))}</DisplayString>
        <DisplayString Condition="(key_tt)==69">[table] {((struct Table *)(key_val).gc)}</DisplayString>
        <!--ttisCclosure 64+48+6-->
        <DisplayString Condition="(key_tt)==118">[c_closuse] {(((union Closure *)(key_val).gc))-&gt;c}</DisplayString>
        <!--ttisLclosure 64+16+6 -->
        <DisplayString Condition="(key_tt)==86">[lua_closuse] {(((union Closure *)(key_val).gc))-&gt;l}</DisplayString>
        <DisplayString Condition="(key_tt&amp;0x1f)==22">[c_function] {((union Closure *)(key_val).gc)}</DisplayString>
        <!--32+6-->
        <DisplayString Condition="(key_tt)==38">[lc_function] {((union Closure *)(key_val).gc)}</DisplayString>
        <DisplayString Condition="(key_tt&amp;0xf)==6">[function] {key_val.p}</DisplayString>
        <DisplayString Condition="(key_tt)==71">[userdata] {((struct Udata *)(key_val).gc)}</DisplayString>
        <DisplayString Condition="(key_tt)==72">[thread] {((struct lua_State *)(key_val).gc)}</DisplayString>
        <DisplayString>[unknown]</DisplayString>
        <Expand>
            <Item Name="[lua_TValue type]">key_tt&amp;0xf</Item>
            <Item Name="[lua_TValue tag]">key_tt</Item>
            <Item Name="[GCUnion]">(key_val.gc)</Item>
            <Item Condition="(key_tt)==2" Name="[lightuserdata]">(const char *)key_val.p</Item>
            <Item Condition="(key_tt)==69" Name="[table]">((struct Table *)(key_val).gc)</Item>
            <Item Condition="(key_tt&amp;0x1f)==22" Name="[c_function]">((union Closure *)(key_val).gc)</Item>
            <Item Condition="(key_tt)==71" Name="[userdata]">((struct Udata *)(key_val).gc)</Item>
            <Item Condition="(key_tt)==72" Name="[thread]">((struct lua_State *)(key_val).gc)</Item>
        </Expand>
    </Type>
    <Type Name="StackValue">
        <DisplayString>{val}</DisplayString>
    </Type>
    <Type Name="TValue">
        <!--#define ttisnil(o)    checktag((o), LUA_TNIL)-->
        <DisplayString Condition="(tt_)==0">[nil]</DisplayString>
        <DisplayString Condition="(tt_)==1">[boolean] {(bool)(tt_==17)}</DisplayString>
        <DisplayString Condition="(tt_)==2">[lightuserdata] {(void *)(value_).p}</DisplayString>
        <DisplayString Condition="(tt_)==3">[int] {(void *)(value_).i}</DisplayString>
        <!--#define ttisinteger(o)    checktag((o), LUA_TNUMINT)-->
        <!--<DisplayString Condition="(tt_)==35">[int] {(lua_Integer)(value_).i}</DisplayString>-->
        <DisplayString Condition="(tt_)==19">[float] {(lua_Number)((value_).n)}</DisplayString>
        <DisplayString Condition="(tt_&amp;0x0f)==4">[string] {((struct TString *)(value_.gc))}</DisplayString>
        <DisplayString Condition="(tt_)==69">[table] {((struct Table *)(value_).gc)}</DisplayString>
        <!--ttisCclosure 64+48+6-->
        <DisplayString Condition="(tt_)==102">[c_closuse] {(((union Closure *)(value_).gc))-&gt;c}</DisplayString>
        <!--ttisLclosure 64+16+6 -->
        <DisplayString Condition="(tt_)==70">[lua_closuse] {(((union Closure *)(value_).gc))-&gt;l}</DisplayString>
        <DisplayString Condition="(tt_&amp;0x1f)==22">[c_function] {((union Closure *)(value_).gc)}</DisplayString>
        <!--32+6-->
        <DisplayString Condition="(tt_)==38">[lc_function] {((union Closure *)(value_).gc)}</DisplayString>
        <DisplayString Condition="(tt_&amp;0xf)==6">[function] {value_.p}</DisplayString>
        <DisplayString Condition="(tt_)==71">[userdata] {((struct Udata *)(value_).gc)}</DisplayString>
        <DisplayString Condition="(tt_)==72">[thread] {((struct lua_State *)(value_).gc)}</DisplayString>
        <DisplayString>[unknown]</DisplayString>
        <Expand>
            <Item Name="[lua_TValue type]">tt_&amp;0xf</Item>
            <Item Name="[lua_TValue tag]">tt_</Item>
            <Item Name="[GCUnion]">(value_.gc)</Item>
            <Item Condition="(tt_)==2" Name="[lightuserdata]">(const char *)value_.p</Item>
            <Item Condition="(tt_)==69" Name="[table]">((struct Table *)(value_).gc)</Item>
            <Item Condition="(tt_&amp;0x1f)==22" Name="[c_function]">((union Closure *)(value_).gc)</Item>
            <Item Condition="(tt_)==71" Name="[userdata]">((struct Udata *)(value_).gc)</Item>
            <Item Condition="(tt_)==72" Name="[thread]">((struct lua_State *)(value_).gc)</Item>
        </Expand>
    </Type>
    <Type Name="Udata">
        <DisplayString>userdata</DisplayString>
    </Type>
    <Type Name="CClosure">
        <DisplayString>{f}</DisplayString>
    </Type>
    <Type Name="LClosure">
        <DisplayString Condition="p-&gt;source">{(p-&gt;source) } : {(p-&gt;linedefined)} )</DisplayString>
        <DisplayString>=?</DisplayString>
        <Expand>
            <Item Condition="p-&gt;source" Name="source">(p-&gt;source)</Item>
            <Item Name="linedefined">(p-&gt;linedefined)</Item>
            <Item Name="lastlinedefined">(p-&gt;lastlinedefined)</Item>
            <Item Condition="p-&gt;linedefined == 0" Name="what">&quot;main&quot;</Item>
            <Item Condition="p-&gt;linedefined != 0" Name="what">&quot;Lua&quot;</Item>
        </Expand>
    </Type>
    <Type Name="Closure">
        <!--lclosuse 86-64-->
        <DisplayString Condition="c.tt==22">{l}</DisplayString>
        <!--cclosuse 118-64-->
        <DisplayString Condition="c.tt==54">{c}</DisplayString>
        <DisplayString>[tag]{c.tt}{c}</DisplayString>
        <Expand>
            <Item Name="[CClosure]">c</Item>
            <Item Name="[LClosure]">l</Item>
        </Expand>
    </Type>
    <Type Name="Table">
        <DisplayString>table</DisplayString>
        <Expand>
            <Item Name="[array size]">alimit</Item>
            <Item Condition="metatable!=0" Name="metatable">metatable</Item>
            <IndexListItems>
                <Size>alimit</Size>
                <ValueNode>array[$i]</ValueNode>
            </IndexListItems>
            <Item Name="[hash size]">1&lt;&lt;lsizenode</Item>
            <IndexListItems>
                <Size>1&lt;&lt;lsizenode</Size>
                <ValueNode>node[$i]</ValueNode>
            </IndexListItems>
        </Expand>
    </Type>
    <!--Type Name="TString"><DisplayString>{(char *)(&amp;tsv+sizeof(*this)/sizeof(tsv)),s}</DisplayString></Type-->
    <Type Name="TString">
        <DisplayString>{(char *)(this)+8+sizeof(double)*2}</DisplayString>
    </Type>
    <Type Name="UTString">
        <DisplayString>{(char *)(&amp;tsv+sizeof(*this)/sizeof(tsv)),s}</DisplayString>
    </Type>
    <Type Name="TKey">
        <DisplayString>{tvk}</DisplayString>
    </Type>
    <Type Name="CallInfo">
        <!--ttisLclosure 6 -->
        <DisplayString Condition="(func-&gt;val.tt_&amp;0x1f)==6">[lua_closure]{(((union Closure *)(func-&gt;val.value_).gc))-&gt;l}</DisplayString>
        <!--ttislcf 16+6 -->
        <DisplayString Condition="(func-&gt;val.tt_&amp;0x1f)==22">[c_function]{((union Closure *)(func-&gt;val.value_).gc)}</DisplayString>
        <!--ttisCclosure 32+6 -->
        <DisplayString Condition="(func-&gt;val.tt_&amp;0x1f)==38">[c_closure]{(((union Closure *)(func-&gt;val.value_).gc))-&gt;c}</DisplayString>
        <DisplayString>[func],{func}</DisplayString>
        <Expand>
            <!--<Item Name="[func]">func</Item>-->
            <!--<Item Name="[Closure]">((union Closure *)(func-&gt;val.value_).gc)</Item>-->
            <!--<Item Name="[CClosure]">((union GCUnion *)(func-&gt;val.value_).gc)-&gt;cl.c</Item>-->
            <!--<Item Name="[LClosure1]">((union GCUnion *)(func-&gt;val.value_).gc)-&gt;cl.l</Item>-->
            <!--<Item Name="[LClosure2]">(((union Closure *)(func-&gt;val.value_).gc))-&gt;l</Item>-->
            <!--<Item Name="[union u]">u</Item>-->
        </Expand>
    </Type>
</AutoVisualizer>
